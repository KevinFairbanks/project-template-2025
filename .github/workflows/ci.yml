name: CI/CD Pipeline

on:
  push:
    branches: [dev, master]
  pull_request:
    branches: [dev, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quality Assurance
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check Prettier formatting
      run: npm run format:check

    - name: Run tests
      run: npm test

    - name: Security audit
      run: npm audit --audit-level=high

    # Only run on PRs to check new dependencies
    - name: Dependency Review
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v4

  # Stage 2: Build & Package
  build-and-package:
    needs: quality-checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # Stage 3: Security Scanning (Optional but Recommended)
  security-scan:
    needs: build-and-package
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-package.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 4a: Deploy to Staging (dev branch only)
  deploy-staging:
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    needs: [build-and-package, security-scan]
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Deploy to Coolify Staging
      uses: ./.github/actions/deploy-coolify
      with:
        webhook_url: ${{ secrets.COOLIFY_STAGING_WEBHOOK }}
        image: ${{ needs.build-and-package.outputs.image }}
        environment: staging

    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        echo "âœ… Staging deployment successful!"

  # Stage 4b: Deploy to Production (master branch only, manual approval)
  deploy-production:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [build-and-package, security-scan]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Deploy to Coolify Production
      uses: ./.github/actions/deploy-coolify
      with:
        webhook_url: ${{ secrets.COOLIFY_PRODUCTION_WEBHOOK }}
        image: ${{ needs.build-and-package.outputs.image }}
        environment: production

    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        echo "âœ… Production deployment successful!"

    - name: Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸš€ **Production Deployment**

          **Image:** `${{ needs.build-and-package.outputs.image }}`
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          **Changes:**
          See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.

          **Deployed:** ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  # Notification (Optional - commented out since no Slack)
  # notify:
  #   if: always()
  #   needs: [deploy-staging, deploy-production]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Notify Deployment Status
  #     run: |
  #       echo "Deployment completed with status: ${{ needs.deploy-staging.result || needs.deploy-production.result }}"
  #       # Add your notification logic here (email, webhook, etc.)
